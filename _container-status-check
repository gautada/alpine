#!/bin/sh

# Abtract:
# container-status-check: Logic to execute [health, liveness, readiness, startup] status checks
#                         this script should reside in `/usr/bin` and should be symlinked by
#                         `container-[health|liveness|readiness|startup]-check`. This script
#                         determines which was called and subsequently calls the appropriate
# .                       `/etc/container/[health|liveness|readiness|startup]-check` scripts
#                         which can be overidden by a downstream container.
#
# author: adam@gautier.org
# date: 2022-11-16
# component: status
#
# - - - - - - - - - - - - - - - - - - - - - - -
#
# Note: 
# The HEALTHCHECK instruction tells container manager how to
# test a container to check that it is still working. This can
# detect cases such as a web server that is stuck in an
# infinite loop and unable to handle new connections, even
# though the server process is still running.
#
# When a container has a healthcheck specified, it has a
# health status in addition to its normal status. This status
# is initially starting. Whenever a health check passes, it
# becomes healthy (whatever state it was previously in). After
# a certain number of consecutive failures, it becomes
# unhealthy.
#
# The commandâ€™s exit status indicates the health status of the 
# container. The possible values are:
#
# - 0: success - the container is healthy and ready for use
# - 1: unhealthy - the container is not working correctly
# - 2: reserved - do not use this exit code

SCRIPT_HEALTH_CHECK="container-health-check"
SCRIPT_LIVENESS_CHECK="container-liveness-check"
SCRIPT_READINESS_CHECK="container-readiness-check"
SCRIPT_STARTUP_CHECK="container-startup-check"

CALL=$0
CALLED_SCRIPT="${CALL##*/}"
echo $CALLED_SCRIPT

FAIL="FAIL"
TARGET=$FAIL

# Determine the script to execute based on the symlinked script called
if [ "$SCRIPT_HEALTH_CHECK" == "$CALLED_SCRIPT" ] ; then
 TARGET="/etc/container/health-check"
fi

if [ "$SCRIPT_LIVENESS_CHECK" == "$CALLED_SCRIPT" ] ; then
 TARGET="/etc/container/liveness-check"
fi

if [ "$SCRIPT_READINESS_CHECK" == "$CALLED_SCRIPT" ] ; then
 TARGET="/etc/container/readiness-check"
fi

if [ "$SCRIPT_STARTUP_CHECK" == "$CALLED_SCRIPT" ] ; then
 TARGET="/etc/container/startup-check"
fi

if [ "$FAIL" == $TARGET ] ; then
 echo "[ERROR] Unable to determine target script"
 return 1
fi

RTN=0

CMD=$FAIL
if [ -f $TARGET ] ; then
 if  [ -L $TARGET ] ; then 
  if [ -e $TARGET ] ; then # Trget exists as file, is symlink, and symlink is connected
   CMD=$TARGET
  else # Target symlink is NOT connected
   echo "[ERROR] Unable to follow target($TARGET)"
   return 1
  fi
 else # Target exists as file and not symlink
  CMD=$TARGET
 fi
else # Target does not exist as file
 echo "[ERROR] Cannot find target($TARGET)"
 return 1
fi

if [ "$FAIL" == $CMD ] ; then
 echo "[ERROR] Unable to determine command"
 return 1
fi
if [ $RTN -ne 0 ] ; then
 echo "[ERROR] RTN variable in invalid state"
 return 1
fi

# Run the proper status script
exec $CMD
RTN=$?
return $RTN
