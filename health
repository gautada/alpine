#!/bin/sh

# This is the default script for checking the health and testing of a container. The default behavior is to loop 
# through all of the scripts in `/etc/container/health.d` or `/etc/container/test.d` and execute.

_MAX=72
_PASS="[+]"
_FAIL="[-]"

_health_msg() {
 # printf '%.*s' "$_MAX" "$1"
 echo $1
}

_health_print() {
  # printf "%s... %s\n" "$1" "$2"
  echo " $2 - $1  $3"
}

_docker_latest_version() {
 # Check the docker.io registry for the latest image version number
 response=$(curl -sSL "https://registry.hub.docker.com/v2/repositories/$1/tags?page_size=1000")
 # echo "$response"
 # Parse the JSON response to extract the latest image
 latest=$(echo "$response" | jq -r '.results[] | select(.name == "latest")')
 # echo "$latest" | jq .
 # Parse to get digest
 digest=$(echo "$latest" | jq -r '.digest')
 # echo "$digest"
 # Pull all names of images where the digest matches latest
 results=$(echo "$response" | jq -r --arg digest "$digest" '.results[] | select(.digest == $digest) | .name' | tr '\n' ' ')
 # echo "[$results]"
 for result in $results; do
 # echo $results | while IFS= read -r result; do
  # print if in major.minor.revision or major.minor format
  case "$result" in
   *.*.*)
    echo "$result"
    ;;
#    *.*)
#     echo "$result"
#     ;;
   *)
    # echo "** [$result]"
    # result="The variable '$result' is in the #.# or #.#.# format."
    ;;
  esac
 done 
}

_proc_check() {
 /usr/bin/pgrep $1 > /dev/null
 echo "$?"
}

_assert() {
 # echo "$@"
 _MSG="$(_health_msg $3)"
 if [ "$1" = "$2" ] ; then
  _health_print "$3" $_PASS
 else
  _health_print "$3" $_FAIL "[$1 - $2]"
  exit 1
 fi
}

_container_health() {
 for script in /etc/container/health.d/*.health ; do
  if [ -r "$script" ] ; then
   echo "Checking container health with script: $script"
   . "$script"
   __check
  fi
 done
 unset script
 echo "~~~~~~~~~~~~~~~~~~~~~"
 echo "$HOSTNAME - container is healthy"
}

_container_test() {
 for script in /etc/container/health.d/*.test ; do
  if [ -r "$script" ] ; then
   echo "Testing container with script: $script"
   . "$script"
   __test
  fi
 done
 unset script
 echo "~~~~~~~~~~~~~~~~~~~~~"
 echo "$HOSTNAME - container is tested"
}
