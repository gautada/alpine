#!/bin/sh
#
# container-backup
#
# Controller script for container wide back-up

# Load all the fetures in the backup drop-in directory
BACKUP_CONFIG="/etc/container/backup.d"
BACKUP_FUNCTION="container_backup"
BACKUP_LEGACY="/etc/container/backup.fnc"

if [ -d $BACKUP_CONFIG ] ; then
 for feature in $BACKUP_CONFIG/* ; do
  if [ -r "$feature" ] ; then
   echo "[ INFO]: Loading feature($feature)."
   source "$feature"
  fi
 done
else
 if [ -f $BACKUP_LEGACY ] ; then
  echo "[ INFO]: Loading legacy feature($BACKUP_LEGACY)."
  source $BACKUP_LEGACY
 else
  echo "[ERROR]: Unable to load the drop-in directory($BACKUP_CONFIG) or function file($BACKUP_LEGACY)"
  return 10
 fi
fi

if [ "$(type -t $BACKUP_FUNCTION)" == "$BACKUP_FUNCTION" ] ; then
 echo "[ INFO]: Backup function($BACKUP_FUNCTION) loaded."
else
 echo "[ERROR]: Unable to find the backup function($BACKUP_FUNCTION)"
 echo 11
fi

# Load the encryption key
LEGACY_KEY="/etc/container/keys/backup.key"
ENCRYPTION_KEY="/etc/container/keys.d/backup-encryption.key"

if [ -r $ENCRYPTION_KEY ] ; then
 echo "[ INFO]: Default encryption key($ENCRYPTION_KEY)"
else
 if [ -r $LEGACY_KEY ] ; then
  echo "[ WARN]: Overwrite Encryption Key with Legacy Key($LEGACY_KEY)"
  ENCRYPTION_KEY=$LEGACY_KEY
 else
  echo "[ERROR]: Could not find Encryption Key($ENCROPTION_KEY) or Legacy Key($LEGACY_KEY)"
  return 30
 fi
fi
KEY_FINGERPRINT="$(gpg --show-keys $ENCRYPTION_KEY | sed -n '2p' | xargs)"
if [ "" == "$(gpg --list-keys)" ] ; then
 gpg --trusted-key $KEY_FINGERPRINT --import $ENCRYPTION_KEY
else
 gpg --list-keys
fi
 # gpg --trusted-key $(gpg --show-keys /etc/backup/config/encryption.key | sed -n '2p' | xargs) --import /etc/backup/config/encryption.key
 
# Execute backup
BACKUP_TAG="$(date --utc +%H)"
FOLDER_WORKING="/tmp/backup"
FOLDER_CACHE="/var/backup"
FOLDER_BACKUP="/opt/backup"

echo "[ INFO]: Execute the container backup function"
cd $FOLDER_WORKING
container_backup
if [ ! $? -eq 0 ] ; then
 echo "[ERROR]: Function did not work"
 return 1
fi
cd /

# Clear all but the latest chain
echo "[ INFO]: Clean up backups"
duplicity remove-all-but-n-full 1 --force file://$FOLDER_BACKUP

FILE_MANIFEST=$FOLDER_BACKUP/duplicity-full.*.manifest.gpg
# SET BACKUP CHAIN
if [ ! -f $FILE_MANIFEST ] ; then
 echo "[ INFO]: FULL backup(File)"
 
 duplicity full --encrypt-key $KEY_FINGERPRINT --archive-dir $FOLDER_CACHE $FOLDER_WORKING file://$FOLDER_BACKUP
else
   # RESET BACKUP CHAIN - At midnight
 if [ "00" == "$(date --utc +%H)" ] ; then
  echo "[ INFO]: FULL backup(00)"
  duplicity full --encrypt-key $KEY_FINGERPRINT --archive-dir $FOLDER_CACHE $FOLDER_WORKING file://$FOLDER_BACKUP
 else
  TIMESTAMP_LAST=$(date --utc +%s -r $FILE_MANIFEST)
  TIMESTAMP_NOW=$(date --utc +%s)
  TIMESTAMP_DAY=86400
  TIMESTAMP_DELTA=$(($TIMESTAMP_NOW-$TIMESTAMP_LAST))
  # RESET BACKUP CHAIN - If older than 24 hours
  if [ $TIMESTAMP_DAY -lt $TIMESTAMP_DELTA ] ; then
   echo "[ INFO]: FULL backup(Timestamp)"
   duplicity full --encrypt-key $KEY_FINGERPRINT --archive-dir $FOLDER_CACHE $FOLDER_WORKING file://$FOLDER_BACKUP
  else # INCREMENTAL BACKUP
   echo "[ INFO]: INCREMENTAL backup"
   duplicity incr --encrypt-key $KEY_FINGERPRINT --archive-dir $FOLDER_CACHE $FOLDER_WORKING file://$FOLDER_BACKUP
  fi
 fi
fi
echo "[ INFO]: Clean working folder $FOLDER_WORKING"
rm -rvf $FOLDER_WORKING/*
