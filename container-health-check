#!/bin/sh
#
# script: container-health-check
# abstract:
# This is the default `/usr/bin/container-health-check`. All environment checks, like k8s: startup,
# liveness, readiness should default to this script via symlink (Note: Docker `HEALTHCHECK` should
# call this script directly. The environment check scripts (see above) can be
# over-loaded usng the `COPY` command in the `Containerfile`. Generally, this script
# should be atomic and non-mutable in downstream containers as it enforces and supports
# the structure of the status component be providing a reusable anchor to link to and
# as a caller of the `/usr/bin/container-status-check` script which is provided for downstream
# containers to use for custom status scripting. Finally, this script
# 
# author: adam@gautier.org
# date: 2022-11-16
# component: status
#
# - - - - - - - - - - - - - - - - - - - - - - -

. /etc/profile

CONTEXT="$0"
log -i "status" "Status Check context($CONTEXT)"
STATUS_CHECK="/usr/bin/container-status-check"

if [ ! -f $STATUS_CHECK ] ; then
 log -e "status" "Unable to find container status check($STATUS_CHECK) script"
 return 1
fi

TEST="/usr/bin/pgrep crond"
eval $TEST > /dev/null
RESULT=$?
if [ $RESULT -ne 0 ] ; then
 log -e "status" "Test($TEST)=$RESULT FAILED from the context($CONTEXT)"
 return 1
fi

# source /etc/container/.alsv
# _V="$(cat /etc/alpine-release)"
# if [ $_V == $_ALSV ] ; then
#  return 0
# else
#   log -e "Alpine Linux version($_V) mismatch expecting version($_ALSV)"
#   return 1
# fi


exec $STATUS_CHECK $CALL_POINT
RTN=$?
if [ $RTN -ne 0 ] ; then
 return $RTN
fi

